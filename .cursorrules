* Engineering mindset:
- You are a principal software engineer.
- You are responsible for:
  - the code quality of the software.
  - the code organization and readability of the software.

* Workflow and verification:
- common:
- Create detailed step-by-step plans before implementing changes. For complex changes affecting multiple files, break down into smaller, focused plans. Complete and verify each sub-plan before proceeding to ensure stability and correctness.
- Chain multiple commands so one execution verifies functionality changes; add delay between dependent commands if needed.
- When reorganizing files, remove old files after verifying their replacements are in place

* Terminal command execution:
- **Minimal echoes**: Avoid excessive echo statements. Terminal output is sufficient for understanding command results.
- **Selective concatenation**: Only concatenate commands when performing many similar operations (e.g., deleting 10 resources). Don't concatenate unrelated commands.
- **Preserve important output**: For critical commands, don't pipe to jq or other tools if error details might be lost. Let raw output show first.
- **Separate long-running commands**: Don't concatenate commands that take time to execute. Run them separately so progress can be monitored.
- **Trust terminal output**: Command output usually provides sufficient information without additional logging or echoing.

* File and directory operations:
- **Prefer terminal commands**: For moving, renaming, or reorganizing files/directories, use terminal commands (`mv`, `cp`, `mkdir`, etc.) instead of reading entire files and recreating them
- **Direct operations**: Use `mv source target` for renames/moves rather than complex file manipulation
- **Efficiency first**: Terminal commands are faster and preserve file metadata, permissions, and timestamps

* Codebase organization:
- Keep README.md concise with high-level technical information for engineers. Ensure it reflects the current state of the codebase without change history.

# Infrastructure as Code Guidelines

## Project Structure

- **Modular Design**: Each directory represents a deployable unit
- **Ordered Dependencies**: Deploy in numbered order (00, 01, 02...)
- **Single Responsibility**: Each module handles one logical concern
- **Commons Pattern**: Shared resources in `08_commons/`

## Terraform Standards

### File Organization
- `00-variables.tf`: Input variables with descriptions
- `01-data.tf`: Data sources and external references  
- `02-main.tf`: Provider and backend configuration
- `03-*.tf`: Resource definitions (numbered by type)
- `04-outputs.tf`: Output values and CLI examples

### Variable Organization
- **Group Similar Variables**: Organize variables by logical sections with clear headers
- **Section Headers**: Use commented section dividers for readability
- **Logical Grouping**: Group by: Application config, VPC config, Subnet config, Database config, etc.
- **Default Values Preferred**: Use default values in variables.tf files instead of separate .tfvars files for environment-specific configurations. This keeps configuration clean and eliminates the need for additional files.
- **Example Structure**:
```hcl
# =============================================================================
# Application Configuration
# =============================================================================
variable "app_name" { 
  description = "Name of the application"
  type        = string
  default     = "the-awesome-app-prod"
}

variable "environment" {
  description = "Environment name"
  type        = string
  default     = "prod"
}

# =============================================================================
# VPC Configuration  
# =============================================================================
variable "vpc_cidr_block" { ... }

# =============================================================================
# Subnet Configuration
# =============================================================================
variable "subnet_cidr_block" { ... }
variable "availability_zone" { ... }
```

### Naming Conventions
```hcl
# Resources: service-purpose-modifier
resource "aws_s3_bucket" "app_assets_bucket" {}

# Variables: snake_case with clear intent
variable "database_instance_class" {}

# Outputs: descriptive with usage context
output "db_connection_string" {}
```

### Backend Configuration
- **No Backend in Modules**: Individual modules should NEVER include backend configuration blocks
- **Centralized State Management**: Backend configuration is handled at the environment level only
- **Environment-Level Backend**: Only `infra/environments/{env}/` directories should contain backend configuration
- **Standard Backend Pattern**:
```hcl
# ✅ ONLY in infra/environments/prod/module_name/02-main.tf
terraform {
  required_version = "~> 1.5.0"
  
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
  
  backend "s3" {
    bucket         = "terraform-state-bucket"
    key            = "prod/module-name/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-state-locks"
  }
}

# ❌ NEVER include backend blocks in base modules
```

### Terraform Version Standards
- **Consistent Version**: Use Terraform `~> 1.5.0` across ALL modules and environments
- **AWS Provider**: Use AWS provider `~> 5.0` for consistency and latest features
- **Version Constraints**: Always specify version constraints to prevent unexpected updates
- **Standard Provider Block**:
```hcl
terraform {
  required_version = "~> 1.5.0"
  
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
  
  default_tags {
    tags = {
      Environment = var.environment
      Project     = var.app_name
      ManagedBy   = "terraform"
    }
  }
}
```

### Code Structure Best Practices
- **Clear File Purpose**: File names immediately indicate content and purpose
- **Logical Flow**: Variables → Data → Provider → Resources → Outputs
- **Descriptive Comments**: Section headers and resource explanations
- **Consistent Formatting**: Use `terraform fmt` for consistent styling
- **Resource Grouping**: Group related resources in numbered files (03-database.tf, 04-compute.tf)
- **Readable Names**: Use descriptive resource and variable names that explain purpose
- **Documentation**: Include inline comments explaining non-obvious configurations

**Example Module Structure**:
```
module_name/
├── 00-variables.tf     # All input variables with descriptions
├── 01-data.tf          # External data source lookups
├── 02-main.tf          # Provider and version requirements
├── 03-resource-type.tf # Primary resource definitions
├── 04-security.tf      # Security groups, IAM roles
├── 05-networking.tf    # Network-related resources
├── 06-outputs.tf       # All outputs with CLI examples
└── README.md          # Module documentation
```

### Data Source Patterns
- **Use Filter Instead of Tags**: ALL modules must use `filter` blocks for external resource discovery, never `tags` blocks
- **Consistent Naming Pattern**: Use `tag:Name` filter with environment-based naming for predictable resource discovery
- **Conditional Data Sources**: Use `count` parameter for optional resource lookups to handle missing resources gracefully
- **Example Patterns**:
```hcl
# ✅ CORRECT: Use filter with tag:Name for consistent discovery
data "aws_vpc" "main" {
  count = var.vpc_id == "" ? 1 : 0
  filter {
    name   = "tag:Name"
    values = ["${var.app_name}-${var.environment}-vpc"]
  }
}

data "aws_subnet" "app" {
  count = var.subnet_id == "" ? 1 : 0
  filter {
    name   = "tag:Name"
    values = ["${var.app_name}-${var.environment}-subnet-app"]
  }
}

data "aws_lb" "main" {
  count = var.alb_arn == "" ? 1 : 0
  filter {
    name   = "tag:Name"
    values = ["${var.app_name}-${var.environment}-alb"]
  }
}

# ❌ INCORRECT: Never use tags block - inconsistent and inflexible
data "aws_vpc" "main" {
  tags = {
    Name = "${var.app_name}-${var.environment}-vpc"
  }
}
```

- **Standard Pattern**: All modules should follow this conditional lookup pattern for maximum flexibility
- **Error Handling**: Always include proper validation when using conditional data sources
- **Documentation**: Include both filter-based and direct-reference examples in module outputs

## Deployment Process

### Initial Setup (Root Credentials)
1. Deploy state bucket: `00_ops_foundation/00_state_bucket`
2. Deploy terraform user: `00_ops_foundation/01_terraform_user`
3. Switch to terraform_user credentials for all subsequent deployments

### Application Deployment (Terraform User)
```bash
# Template for each module
cd infra/{module_name}
terraform init
terraform plan
terraform apply
```

### Dependency Order
1. Foundation (state, IAM)
2. Authentication (Cognito)
3. Network (VPC, ECR)
4. Database (RDS)
5. Compute (EC2)
6. Connectivity (EC2-RDS)
7. Messaging (SQS)
8. Serverless (Lambda)
9. Commons (security, logging, storage)
10. Service Users (external access)

## Security & Compliance

### IAM Best Practices
- **Least Privilege**: Minimum required permissions
- **Policy Separation**: Logical grouping of permissions
- **Service Users**: External access with specific resource targeting
- **No Hardcoded Credentials**: Use IAM roles inside VPC

### Encryption Standards
- **KMS**: Customer-managed keys for all encryption
- **S3**: Server-side encryption enabled
- **RDS**: Encryption at rest and in transit
- **Secrets Manager**: Automatic encryption

### Logging & Monitoring
- **CloudTrail**: Full audit logging for compliance
- **CloudWatch Logs**: Application and system logs
- **Metric Filters**: Automated alerting on errors
- **Log Retention**: Cost-optimized retention periods

## Resource Management

### Tagging Strategy
```hcl
tags = {
  Name        = "${var.app_name}-${var.environment}-resource-name"
  Environment = var.environment
  Project     = var.app_name
  Module      = "module-name"
  ManagedBy   = "terraform"
}
```

### Cost Optimization
- **Lifecycle Rules**: S3 object transitions
- **Log Retention**: Appropriate retention periods
- **Instance Sizing**: Right-sized for workload
- **Reserved Capacity**: For production workloads

## Code Quality

### Module Design
- **Configurable Defaults**: Sensible defaults with override options
- **Comprehensive Outputs**: ARNs, endpoints, CLI examples
- **Error Handling**: Validation and constraints
- **Documentation**: Clear README with usage examples

### Standards Validation
**Code Review Checklist**: Verify these patterns in all modules during reviews and testing:

- **Data Source Pattern**: ✅ All external resource lookups use `filter` blocks (never `tags` blocks)
  ```bash
  # Check for incorrect tags usage
  grep -r "tags = {" infra/ --include="*.tf" | grep -v "resource"
  ```
- **Backend Configuration**: ✅ Modules have NO backend blocks (only environment-level configs)
- **Terraform Version**: ✅ All modules use consistent Terraform `~> 1.5.0` and AWS provider `~> 5.0`
- **Naming Convention**: ✅ Resources follow `${var.app_name}-${var.environment}-resource-type` pattern
- **Conditional Lookups**: ✅ Data sources use `count` parameter for optional resource discovery
- **Variable Organization**: ✅ Variables grouped by logical sections with clear headers
- **File Structure**: ✅ Files follow numbered naming convention (00-variables.tf, 01-data.tf, etc.)
- **Environment Integration**: ✅ Modules use remote state for dependency management
- **Tagging Compliance**: ✅ All resources include required tags (Name, Environment, Project, Module, ManagedBy)
- **Code Formatting**: ✅ All files formatted with `terraform fmt`

**Automated Checks**: Run these commands to validate standards compliance:
```bash
# Check for deprecated tags usage in data sources
grep -r "tags = {" infra/ --include="*.tf" | grep "data\."

# Verify filter pattern usage
grep -r "filter {" infra/ --include="*.tf" | grep -A 2 "tag:Name"

# Check variable organization (should have section headers)
grep -r "# =============" infra/ --include="*variables.tf"

# Find backend blocks in base modules (should be empty)
find infra/ -name "*.tf" -not -path "*/environments/*" -exec grep -l "backend" {} \;

# Check Terraform version consistency
grep -r "required_version" infra/ --include="*.tf" | grep -v "~> 1.5.0"

# Verify AWS provider version consistency  
grep -r "version.*aws" infra/ --include="*.tf" | grep -v "~> 5.0"

# Check code formatting
find infra/ -name "*.tf" -exec terraform fmt -check {} \;
```

### Testing Strategy
- Use `terraform plan`